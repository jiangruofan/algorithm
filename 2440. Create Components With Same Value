class Solution:
    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:
        if not edges:
            return 0

        dic = defaultdict(list)
        indegree = [0 for _ in range(len(nums))]
        for x, y in edges:
            dic[x].append(y)
            dic[y].append(x)
            indegree[x] += 1
            indegree[y] += 1
        
        for i in range(len(nums)):
            if indegree[i] == 1:
                root = i
                break

        
        def dfs(node, fa, target):
            total = nums[node]
            for child in dic[node]:
                if child == fa:
                    continue
                total += dfs(child, node, target)
            if total == target:
                return 0
            elif total < target:
                return total
            else:
                return float('inf')

        res = 0
        sum1 = sum(nums)
        for val in range(sum1, int(sqrt(sum1))-1, -1):
            if sum1 % val:
                continue
            if dfs(root, -1, sum1 // val) == 0:
                return val - 1
            else:
                if dfs(root, -1, val) == 0:
                    res = max(res, sum1 // val - 1)
        return res
